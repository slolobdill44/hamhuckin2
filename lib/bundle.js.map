{"version":3,"sources":["webpack:///webpack/bootstrap da92e5944eba4c0f2652","webpack:///./lib/hamhuckin.js","webpack:///./lib/game.js","webpack:///./lib/hammo.js","webpack:///./lib/moving_object.js","webpack:///./lib/game_view.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,EAAC;;;;;;;ACtBD;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oBAAmB,oBAAoB;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA,OAAM;AACN;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;;;;;;;AC/CA;;AAEA;AACA,2BAA0B;AAC1B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;;;AAGA;;;;AAIA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;AC5FA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap da92e5944eba4c0f2652","const Game = require(\"./game\");\nconst GameView = require(\"./game_view\");\n\n\nconst Hammo = require(\"./hammo\");\nconst MovingObject = require(\"./moving_object\");\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  const canvas = document.getElementById('game-canvas');\n  const ctx = canvas.getContext(\"2d\");\n  // ctx.fillStyle = \"#3D52D5\";\n  // ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n\n  const game = new Game();\n  new GameView(game, ctx).start();\n\n  // const hammo = new Hammo();\n  // hammo.draw(ctx);\n  // console.log(hammo);\n  // hammo.rotate(ctx);\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/hamhuckin.js\n// module id = 0\n// module chunks = 0","const Hammo = require(\"./hammo\");\n\nclass Game {\n  constructor() {\n    this.hammo = [];\n\n    this.addHammo();\n  }\n\n  addHammo() {\n    for (let i = 0; i < Game.NUM_HAMMO; i++) {\n      this.hammo.push(new Hammo());\n    }\n  }\n\n  draw(ctx) {\n    ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\n    ctx.fillStyle = \"#3D52D5\";\n    ctx.fillRect(0, 0, Game.DIM_X, Game.DIM_Y);\n\n    this.hammo.forEach((object) => {\n      object.draw(ctx);\n    });\n  }\n\n  allObjects() {\n    return [].concat(this.hammo);\n  }\n\n\n  moveObjects(delta) {\n     this.allObjects().forEach((object) => {\n       object.shootHammo(delta);\n     });\n   }\n\n  step(delta) {\n    this.moveObjects(delta);\n  }\n}\n\n\nGame.DIM_X = 500;\nGame.DIM_Y = 500;\nGame.NUM_HAMMO = 1;\n\n\nmodule.exports = Game;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game.js\n// module id = 1\n// module chunks = 0","const MovingObject = require(\"./moving_object\");\n\nclass Hammo extends MovingObject {\n  constructor(options = {}) {\n    options.src = \"./assets/hammo.png\";\n    super(options);\n    this.isWrappable = false;\n  }\n}\n\n// Hammo.SPEED = 15;\n\nmodule.exports = Hammo;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/hammo.js\n// module id = 2\n// module chunks = 0","class MovingObject {\n  constructor(options) {\n    this.pos = [75, 300];\n    this.vel = [7, 4];\n    this.src = options.src;\n    this.spinAngle = 1;\n    this.trajectoryAngle = 3;\n    this.gravity = .27;\n    this.startTime = (new Date()).getTime();\n  }\n\n  loadImage(ctx) {\n    const posX = this.pos[0];\n    const posY = this.pos[1];\n\n    const img = new Image();\n    img.src = this.src;\n    img.onload = function() {\n      ctx.drawImage(img, posX, posY);\n    };\n  }\n\n  collideWith(otherObject) {\n    // default do nothing\n  }\n\n  draw(ctx) {\n\n    const posX = this.pos[0];\n    const posY = this.pos[1];\n\n    // console.log(this.pos[0]);\n    const img = new Image();\n    img.src = this.src;\n\n    ctx.save();\n    ctx.translate(posX, posY);\n\n\n    ctx.rotate(this.spinAngle * Math.PI/180);\n    this.spinAngle += 5;\n    ctx.drawImage(img, -(img.width/2), -(img.width/2));\n    ctx.restore();\n  }\n\n  aimHammo() {\n\n  }\n\n  shootHammo(timeDelta) {\n    //timeDelta is number of milliseconds since last move\n    //if the computer is busy the time delta will be larger\n    //in this case the MovingObject should move farther in this frame\n    //velocity of object is how far it should move in 1/60th of a second\n    const posX = this.pos[0];\n    const posY = this.pos[1];\n\n\n    const velocityScale = timeDelta / NORMAL_FRAME_TIME_DELTA;\n    const offsetX = this.vel[0] * velocityScale;\n\n    const offsetY = this.vel[1] * velocityScale;\n\n    this.vel[0] -= this.gravity;\n\n\n    this.pos = [this.pos[0] + offsetY, this.pos[1] - offsetX];\n\n\n\n    //parabolic acceleration\n\n    // const time = ((new Date()).getTime() - this.startTime);\n    // const offsetY = this.vel[0] * Math.pow(time / 1000, 2);\n\n\n    // wrapping logic\n\n    // if (this.game.isOutOfBounds(this.pos)) {\n    //   if (this.isWrappable) {\n    //     this.pos = this.game.wrap(this.pos);\n    //   } else {\n    //     this.remove();\n    //   }\n    // }\n  }\n\n  remove() {\n    this.game.remove(this);\n  }\n}\n\nconst NORMAL_FRAME_TIME_DELTA = 1000/60;\n\nmodule.exports = MovingObject;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/moving_object.js\n// module id = 3\n// module chunks = 0","\n\nclass GameView {\n  constructor(game, ctx) {\n    this.ctx = ctx;\n    this.game = game;\n  }\n\n  start() {\n    this.lastTime = 0;\n    //start the animation\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n  animate(time) {\n    // timeDelta averages 16.67\n    const timeDelta = time - this.lastTime;\n    this.game.step(timeDelta);\n    this.game.draw(this.ctx);\n\n    this.lastTime = time;\n\n    //every call to animate requests causes another call to animate\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n}\n\nmodule.exports = GameView;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game_view.js\n// module id = 4\n// module chunks = 0"],"sourceRoot":""}